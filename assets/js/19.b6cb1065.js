(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{54:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"piped-adl-map-to"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#piped-adl-map-to","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("piped::adl_map_to")])]),t._v(" "),s("h2",{attrs:{id:"piped/maphpp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#piped/maphpp","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("<piped/map.hpp>")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" From undefined"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" To undefined"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("piped")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("adl_map_to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("This is used to customize type conversion.")]),t._v(" "),s("p",[t._v("By default, this is a simple "),s("code",[t._v("static_cast<To>(From)")]),t._v(". Generally you should not even have to customize this: simply implement the appropriate operators.")]),t._v(" "),s("p",[s("em",[t._v("Sometimes")]),t._v(" you may want specific behavior to convert between values, perhaps for types you do not control in code you don't own or can't modify. In that case, a specific implementation may be useful.")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("myvec2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("adl_map_to")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("myvec2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" glm"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vec2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" glm"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vec2 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myvec2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("a",{attrs:{href:"#convert-const-From-ampv"}},[s("tt",[t._v("convert(const From &v)")])],1)]),t._v(" "),s("td")])])]),t._v(" "),s("h1",{attrs:{id:"Members"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Members","aria-hidden":"true"}},[t._v("#")]),t._v(" Members")]),t._v(" "),s("h2",{attrs:{id:"convert-const-From-ampv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#convert-const-From-ampv","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("convert(const From &v)")])]),t._v(" "),s("h3",{attrs:{id:"piped/maphpp-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#piped/maphpp-2","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("code",[t._v("<piped/map.hpp>")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" To piped"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("adl_map_to"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" From"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" To "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" From "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"Description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#Description","aria-hidden":"true"}},[t._v("#")]),t._v(" Description")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th"),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("v")])]),t._v(" "),s("td",[s("code",[t._v("const From &")])]),t._v(" "),s("td")])])])])},[],!1,null,null,null);a.default=r.exports}}]);