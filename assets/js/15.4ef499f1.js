(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{51:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"Regular-expression-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#Regular-expression-operations","aria-hidden":"true"}},[t._v("#")]),t._v(" Regular expression operations")]),t._v(" "),a("p",[t._v("Regular expression utilities.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("a",{attrs:{href:"#operatordqdq-re-const-char-sts-size-t-sz"}},[a("tt",[t._v('operator""_re(const char *s, size_t sz)')])],1)]),t._v(" "),a("td",[a("code",[t._v('"foo"_re -> std::regex{"foo"}')])])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#replace-std-regex-re-extra-ptr-const-char-fmt"}},[a("tt",[t._v("replace(std::regex re, extra::ptr< const char > fmt)")])],1)]),t._v(" "),a("td",[a("code",[t._v("std::string")]),t._v(" replace by regex")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#each-match-std-regex-re"}},[a("tt",[t._v("each_match(std::regex re)")])],1)]),t._v(" "),a("td",[t._v("Match input with "),a("code",[t._v("re")]),t._v(", and generate each match as output.")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#split-std-regex-re"}},[a("tt",[t._v("split(std::regex re)")])],1)]),t._v(" "),a("td",[t._v("Split input based on a "),a("code",[t._v("std::regex")]),t._v(", generating each substring. Note a "),a("code",[t._v("std::string")]),t._v(" variant is available.")])])])]),t._v(" "),a("h2",{attrs:{id:"operatordqdq-re-const-char-sts-size-t-sz"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operatordqdq-re-const-char-sts-size-t-sz","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v('operator""_re(const char *s, size_t sz)')])]),t._v(" "),a("h3",{attrs:{id:"piped/regexhpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#piped/regexhpp","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("<piped/regex.hpp>")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("regex piped"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("literals"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_re")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size_t sz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"Description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#Description","aria-hidden":"true"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[a("code",[t._v('"foo"_re -> std::regex{"foo"}')])]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" piped"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("literals"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".b"')]),t._v("_re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "xb"')]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Parameter")]),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("s")])]),t._v(" "),a("td",[a("code",[t._v("const char *")])]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("code",[t._v("sz")])]),t._v(" "),a("td",[a("code",[t._v("size_t")])]),t._v(" "),a("td")])])]),t._v(" "),a("h2",{attrs:{id:"replace-std-regex-re-extra-ptr-const-char-fmt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace-std-regex-re-extra-ptr-const-char-fmt","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("replace(std::regex re, extra::ptr< const char > fmt)")])]),t._v(" "),a("h3",{attrs:{id:"piped/regexhpp-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#piped/regexhpp-2","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("<piped/regex.hpp>")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("detail"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("replace_ piped"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("regex re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" extra"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"Description-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#Description-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[a("code",[t._v("std::string")]),t._v(" replace by regex")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xbc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("p",[t._v("(Note that "),a("code",[t._v("std::regex_replace")]),t._v(" expects a null-terminated string, and thus "),a("code",[t._v("std::string_view")]),t._v(" can't be used for "),a("code",[t._v("fmt")]),t._v(" input here.)")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Returns")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("A new string with replacement done.")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Parameter")]),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("re")])]),t._v(" "),a("td",[a("code",[t._v("std::regex")])]),t._v(" "),a("td",[t._v("A "),a("code",[t._v("std::regex")]),t._v(".")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("fmt")])]),t._v(" "),a("td",[a("code",[t._v("extra::ptr< const char >")])]),t._v(" "),a("td",[a("code",[t._v("const char*")]),t._v(" convertible replacement format, as per "),a("code",[t._v("std::regex_replace")])])])])]),t._v(" "),a("h2",{attrs:{id:"each-match-std-regex-re"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#each-match-std-regex-re","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("each_match(std::regex re)")])]),t._v(" "),a("h3",{attrs:{id:"piped/regexhpp-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#piped/regexhpp-3","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("<piped/regex.hpp>")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("detail"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("each_match_ piped"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("each_match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("regex re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"Description-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#Description-3","aria-hidden":"true"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Match input with "),a("code",[t._v("re")]),t._v(", and generate each match as output.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X:Y:Z:"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("each_match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".:"')]),t._v("_re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map_nth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" map_to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string_view"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" collect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Produces ["X:", "Y:", "Z:"] as a vector of string_view of')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the original string.")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Returns")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Match generator")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Parameter")]),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("re")])]),t._v(" "),a("td",[a("code",[t._v("std::regex")])]),t._v(" "),a("td",[t._v("A "),a("code",[t._v("std::regex")]),t._v(".")])])])]),t._v(" "),a("h2",{attrs:{id:"split-std-regex-re"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#split-std-regex-re","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("split(std::regex re)")])]),t._v(" "),a("h3",{attrs:{id:"piped/regexhpp-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#piped/regexhpp-4","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("<piped/regex.hpp>")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" piped"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("regex re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"Description-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#Description-4","aria-hidden":"true"}},[t._v("#")]),t._v(" Description")]),t._v(" "),a("p",[t._v("Split input based on a "),a("code",[t._v("std::regex")]),t._v(", generating each substring. Note a "),a("code",[t._v("std::string")]),t._v(" variant is available.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Parameter")]),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("re")])]),t._v(" "),a("td",[a("code",[t._v("std::regex")])]),t._v(" "),a("td",[t._v("Regular expression to match split delimiter")])])])])])},[],!1,null,null,null);e.default=r.exports}}]);