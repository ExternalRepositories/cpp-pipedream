(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{105:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"piped-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#piped-generator","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("code",[e._v("piped::generator")])]),e._v(" "),a("h2",{attrs:{id:"piped/generatorhpp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#piped/generatorhpp","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("code",[e._v("<piped/generator.hpp>")])]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typename")]),e._v(" CRTP"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("struct")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("piped")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v("generator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("Generator should be a base class for user-built generators. It provides methods to implicitly use the generator as a C++-style container with "),a("code",[e._v("begin()")]),e._v("/"),a("code",[e._v("end()")]),e._v(".")]),e._v(" "),a("p",[e._v("Generators should publicly inherit this with CRTP, and implement:")]),e._v(" "),a("p",[a("code",[e._v("option_type")]),e._v(" is any type implementing "),a("code",[e._v("operator*()")]),e._v(" to dereference a value, and should be implicitly bool-convertible to describe whether it contains a value or not. Dereferencing with no value is undefined. Pointers (prefer "),a("code",[e._v("ptr<T>")]),e._v(") and "),a("code",[e._v("std::optional<T>")]),e._v(" are two examples.")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("empty()")]),e._v(" returns true, "),a("code",[e._v("next()")]),e._v(" is expected to return "),a("code",[e._v("empty_v<T>")]),e._v(".")]),e._v(" "),a("p",[e._v("Likewise, if "),a("code",[e._v("empty()")]),e._v(" returns false, "),a("code",[e._v("next()")]),e._v(" is expected to produce a value.")]),e._v(" "),a("p",[e._v("Note generators do not have to generalize on any "),a("code",[e._v("T")]),e._v(": "),a("code",[e._v("value_type")]),e._v(" may be fixed, but it is expected to be defined, along with "),a("code",[e._v("option_type")]),e._v(".")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Name")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("a",{attrs:{href:"#begin"}},[a("tt",[e._v("begin()")])],1)]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#end"}},[a("tt",[e._v("end()")])],1)]),e._v(" "),a("td")])])]),e._v(" "),a("h1",{attrs:{id:"Members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#Members","aria-hidden":"true"}},[e._v("#")]),e._v(" Members")]),e._v(" "),a("h2",{attrs:{id:"begin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#begin","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("code",[e._v("begin()")])]),e._v(" "),a("h3",{attrs:{id:"piped/generatorhpp-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#piped/generatorhpp-2","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("code",[e._v("<piped/generator.hpp>")])]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("iterator piped"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v("generator"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" CRTP "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("h3",{attrs:{id:"Description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#Description","aria-hidden":"true"}},[e._v("#")]),e._v(" Description")]),e._v(" "),a("p",[e._v("This returns an iterator suitable for range-based-for-like iteration. It is not expected that you can use algorithms, or store or reuse copies.")]),e._v(" "),a("h2",{attrs:{id:"end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#end","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("code",[e._v("end()")])]),e._v(" "),a("h3",{attrs:{id:"piped/generatorhpp-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#piped/generatorhpp-3","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("code",[e._v("<piped/generator.hpp>")])]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("end_iterator piped"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v("generator"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" CRTP "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("h3",{attrs:{id:"Description-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#Description-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Description")]),e._v(" "),a("p",[e._v("This returns the generator as an end iterator, which when compared with the iterator returned by "),a("code",[e._v("begin()")]),e._v(", will appropriately check if the generator is empty.")])])},[],!1,null,null,null);t.default=s.exports}}]);